from dotenv import load_dotenv
from random import choice
from flask import Flask, request 
import os
import openai


load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")
#openai.api_key = "your-openai-api-key-here"
completion = openai.Completion()

start_sequence = "\nJabe:"
restart_sequence = "\n\nPerson:"
session_prompt="HL7 Messages are used to transfer electronic data between disparate healthcare systems, each sending information about a particular event such as a patient admission. HL7 messages are in human-readable (ASCII) format, though they may require some effort to interpret. This section describes the contents of an HL7 message and how an HL7 message is organized. \n\nAn HL7 message consists of one or more segments. Each segment is displayed on a different line of text. A carriage return character (\\r, which is 0D in hexadecimal) separates one segment from another. \n\nEach segment consists of one or more composites, also known as fields. A pipe (|) character is used to separate one composite from another. If a composite contains other composites, these sub-composites (or sub-fields) are normally separated by caret (^) characters. \n\nHL7 Message Example\n\nHere’s a fun animated video that demonstrates exactly what an HL7 message looks like:\n\n\n\nCheck out the following blog for a more deeper dive: https://blog.interfaceware.com/understanding-hl7-messages/\n\nThe following sections elaborate further on the intricacies of an HL7 message and how to read the standard. For more information about the different HL7 message types and their uses, please see our HL7 Message Types page.\n\nContents:\nHL7 Segments\nHL7 Composites\nDelimiter Characters\nContents:\nHL7 Segments\nHL7 Composites\nDelimiter Characters\nHL7 Segments\nIn an HL7 message, each segment of the message contains one specific category of information, such as patient information or patient visit data. The name of each segment in the message is specified by the first field of the segment, which is always three characters long. Over 120 different HL7 segments are available for use in HL7 messages, this example message contains four HL7 segments: MSH, PID, NK1 and PV1. Different types of HL7 messages contain different HL7 segments.\n\n\nMSH|^~\\&|EPIC|EPICADT|SMS|SMSADT|199912271408|CHARRIS|ADT^A04|1817457|D|2.5|\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567|||M|NON|400003403~1129086|\nNK1||ROE^MARIE^^^^|SPO||(216)123-4567||EC|||||||||||||||||||||||||||\nPV1||O|168 ~219~C~PMA^^^^^^^^^||||277^ALLEN MYLASTNAME^BONNIE^^^^|||||||||| ||2688684|||||||||||||||||||||||||199912271408||||||002376853\n\n \n\nThe HL7 segments in this example contain the following information:\n\nThe MSH (Message Header) segment contains information about the message itself. This information includes the sender and receiver of the message, the type of message this is, and the date and time it was sent. Every HL7 message specifies MSH as its first segment.\nThe PID (Patient Information) segment contains demographic information about the patient, such as name, patient ID and address.\nThe NK1 (Next of Kin) segment contains contact information for the patient’s next of kin.\nThe PV1 (Patient Visit) segment contains information about the patient’s hospital stay, such as the assigned location and the referring doctor.\nWith HL7 messages being used to communicate all kinds of healthcare related information to a variety of disparate systems, sometimes HL7 messages need to contain customized data that cannot be included in any defined segment for its message type. To accommodate for this, the HL7 Standard enables system vendors to create a Z-segment with customized fields to transmit this data.\n\nBy convention, all custom segments begin with the letter Z. For example, a ZPD segment could be created to contain customized patient demographics information. Z-segments can be placed anywhere in an HL7 message, however are typically located as the last segment in a message. Applications that process HL7 messages are usually configured to ignore HL7 Z-segments that they do not know how to handle.\n\nFor more information on how Iguana can support custom Z-segments, please visit https://help.interfaceware.com/v6/hl7-custom-zsegment. \n\nHL7 Composites\nEach segment of an HL7 message consists of one or more composites (also known as fields). By default, the | (pipe) character is used to separate one composite from another.\n\nA composite can be a primitive data type (such as a character string or a number), or can contain other composites. If a composite contains other composites, these sub-composites (or sub-fields) are normally separated by ^ characters. If a sub-composite also contains composites, these sub-sub-composites are normally separated by & characters. Sub-sub-composites must be primitive data types.\n\nFor an example of a typical composite, consider the PID segment of the sample message seen in the previous sections:\n\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567|||M|NON|400003403~1129086|\n\nIn this segment, the fifth composite is the patient name, which is DOE^JOHN^^^^. (The four ^^^^ characters at the end of this composite indicates that it has a total of six sub-composites, and that only the first two of the sub-composites are defined.) In this composite, DOE represents the family name of the patient, and JOHN is the patient’s given name.\n\nIn order to be as flexible as possible and achieve a consensus, the HL7 committees were forced to define many segment fields as optional. The downside of this decision is that you cannot be certain that particular information will be present in a given message. This is one of the reasons why the same message may vary significantly from vendor to vendor.\n\nDelimiter Characters\nIn HL7 messages, certain special characters separate one composite in a segment from another, or separate one sub-composite from another. These special characters are known as delimiter characters.\n\nThe following table lists the default delimiter characters used in HL7:\n\nCharacter\tPurpose\n0x0D\tMarks the end of each segment.\n|\tComposite delimiter.\n^\tSub-composite delimiter.\n&\tSub-sub-composite delimiter.\n~\tSeparates repeating fields.\n\\\nEscape character.\n \n\nCreate an HL7 example that would admit a patient\n\nThe following example shows how to create an HL7 message that would admit a patient.\n\nMSH|^~\\&|EPIC|EPICADT|SMS|SMSADT|199912271408|CHARRIS|ADT^A04|1817457|D|2.5|\nEVN|A04|199912271408|\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567||\n\n\nCreate another example:\n\nMSH|^~\\&|EPIC|EPICADT|SMS|SMSADT|199912271408|CHARRIS|ADT^A04|1817457|D|2.5|\nEVN|A04|199912271408|\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567||\nNK1||ROE^MARIE^^^^|SPO||(216)123\n\nCan you write me a ADT 34 message for a merge?\n\nMSH|^~\\&|EPIC|EPICADT|SMS|SMSADT|199912271408|CHARRIS|ADT^A34|1817457|D|2.5|\nEVN|A34|199912271408|\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567||\nNK1||ROE^MARIE^^^^|SPO||(216)123\n\nWhere is the CMRN located?\n\nThe CMRN (Clinical Master Record Number) is typically located in the PID segment of an HL7 message. For example, in the following PID segment, the CMRN is 0493575:\n\nPID||0493575^^^2^ID 1|454721||DOE^JOHN^^^^|DOE^JOHN^^^^|19480203|M||B|254 MYSTREET AVE^^MYTOWN^OH^44123^USA||(216)123-4567||",

def ask(question, chat_log=None):
    prompt_text = f'{chat_log}{restart_sequence}: {question}{start_sequence}:'
    response = openai.Completion.create(
      engine="text-davinci-003",
      prompt=prompt_text,
      temperature=0.8,
      max_tokens=150,
      top_p=1,
      frequency_penalty=0,
      presence_penalty=0.3,
      stop=["\n"],
    )
    story = response['choices'][0]['text']
    return str(story)

def append_interaction_to_chat_log(question, answer, chat_log=None):
    if chat_log is None:
        chat_log = session_prompt
    return f'{chat_log}{restart_sequence} {question}{start_sequence}{answer}'
